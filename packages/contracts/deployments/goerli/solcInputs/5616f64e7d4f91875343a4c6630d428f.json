{
  "language": "Solidity",
  "sources": {
    "contracts/deps/Aave.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IWETHGateway {\n    function depositETH(\n        address pool,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external payable;\n\n    function withdrawETH(\n        address pool,\n        uint256 amount,\n        address onBehalfOf\n    ) external;\n}\n"
    },
    "contracts/YieldGate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IWETHGateway} from \"./deps/Aave.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ncontract YieldGate {\n    event PoolDeployed(address indexed beneficiary, address indexed deployer, address aavePool);\n\n    address immutable beneficiaryPoolLib;\n    address public immutable aavePool;\n    IWETHGateway public immutable wethgw;\n    IERC20 public immutable token;\n\n    // beneficiary => BeneficiaryPool\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\n\n    constructor(\n        address _pool,\n        address wethGateway,\n        address aWETH\n    ) {\n        aavePool = _pool;\n        wethgw = IWETHGateway(wethGateway);\n        token = IERC20(aWETH);\n\n        BeneficiaryPool bp = new BeneficiaryPool();\n        // init it so no one else can (RIP Parity Multisig)\n        bp.init(address(this), msg.sender);\n        beneficiaryPoolLib = address(bp);\n    }\n\n    function deployPool(address beneficiary) external returns (address) {\n        BeneficiaryPool bpool = BeneficiaryPool(Clones.clone(beneficiaryPoolLib));\n        bpool.init(address(this), beneficiary);\n        beneficiaryPools[beneficiary] = bpool;\n        return address(bpool);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.claimable();\n    }\n\n    // staked returns the total staked ether on behalf of the beneficiary.\n    function staked(address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.staked();\n    }\n\n    function supporterStaked(address supporter, address beneficiary) public view returns (uint256) {\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\n        if (address(bpool) == address(0)) {\n            return 0;\n        }\n        return bpool.supporters(supporter);\n    }\n}\n\ncontract BeneficiaryPool {\n    event Staked(address indexed beneficiary, address indexed supporter, uint256 amount);\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\n    event Claimed(address indexed beneficiary, uint256 amount);\n\n    YieldGate gate;\n    address public beneficiary;\n\n    // supporter => amount\n    mapping(address => uint256) public supporters;\n    // total staked amount\n    uint256 internal totalStake;\n\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"only beneficiary\");\n        _;\n    }\n\n    // Initializes this contract's parameters after deployment. This is called\n    // by the pool factory, i.e. the Yieldgate main contract, right after\n    // deployment. Can only be called once.\n    function init(address _gate, address _beneficiary) public {\n        require(address(gate) == address(0), \"already initialized\");\n\n        gate = YieldGate(_gate);\n        beneficiary = _beneficiary;\n    }\n\n    // Stakes the sent ether on behalf of the provided supporter. The supporter\n    // is usually msg.sender if staking on the transaction sender's behalf.\n    function stake(address supporter) public payable {\n        uint256 amount = msg.value;\n        supporters[supporter] += amount;\n        totalStake += amount;\n\n        gate.wethgw().depositETH{value: amount}(gate.aavePool(), address(this), 0);\n        emit Staked(beneficiary, supporter, amount);\n    }\n\n    // Unstakes all previously staked ether by the calling supporter.\n    // The beneficiary keeps all generated yield.\n    function unstake() public returns (uint256) {\n        address supporter = msg.sender;\n        uint256 amount = supporters[supporter];\n        require(amount >= 0, \"no supporter\");\n\n        supporters[supporter] = 0;\n        totalStake -= amount;\n\n        withdraw(amount, supporter);\n        emit Unstaked(beneficiary, supporter, amount);\n        return amount;\n    }\n\n    // claim sends the accrued interest to the beneficiary of this pool. Staked\n    // ether remains at the yield pool and continues generating yield.\n    function claim() public onlyBeneficiary returns (uint256) {\n        uint256 amount = claimable();\n        withdraw(amount, beneficiary);\n        emit Claimed(beneficiary, amount);\n        return amount;\n    }\n\n    function withdraw(uint256 amount, address receiver) internal {\n        require(gate.token().approve(address(gate.wethgw()), amount), \"ethgw approval failed\");\n        gate.wethgw().withdrawETH(gate.aavePool(), amount, receiver);\n    }\n\n    // claimable returns the total earned ether by the provided beneficiary.\n    // It is the accrued interest on all staked ether.\n    // It can be withdrawn by the beneficiary with claim.\n    function claimable() public view returns (uint256) {\n        return gate.token().balanceOf(address(this)) - staked();\n    }\n\n    // staked returns the total staked ether by this beneficiary pool.\n    function staked() public view returns (uint256) {\n        return totalStake;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}