{
  "address": "0x66309cCBeAEf5F22d67D3868dAe4B51d3E4DEee5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aWETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aavePool",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaryPools",
      "outputs": [
        {
          "internalType": "contract BeneficiaryPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "supporterStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethgw",
      "outputs": [
        {
          "internalType": "contract IWETHGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7fa60ed0d78affbb059b72c32f84ed9e1f243b65648944d6e03d0ebf35cacce8",
  "receipt": {
    "to": null,
    "from": "0xcF99594e0EB80797e212Eddbd08DA1E6f687aF7f",
    "contractAddress": "0x66309cCBeAEf5F22d67D3868dAe4B51d3E4DEee5",
    "transactionIndex": 17,
    "gasUsed": "1842302",
    "logsBloom": "0x
    "blockHash": "0xff87fd9dfe6a10cb3073a09d866f75ba6f77e021921ef3591e2e5ca28f4b271a",
    "transactionHash": "0x7fa60ed0d78affbb059b72c32f84ed9e1f243b65648944d6e03d0ebf35cacce8",
    "logs": [],
    "blockNumber": 7420279,
    "cumulativeGasUsed": "4515535",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x368EedF3f56ad10b9bC57eed4Dac65B26Bb667f6",
    "0xd5B55D3Ed89FDa19124ceB5baB620328287b915d",
    "0x27B4692C93959048833f40702b22FE3578E77759"
  ],
  "numDeployments": 2,
  "solcInputHash": "5616f64e7d4f91875343a4c6630d428f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aWETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aavePool\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryPools\",\"outputs\":[{\"internalType\":\"contract BeneficiaryPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"supporterStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethgw\",\"outputs\":[{\"internalType\":\"contract IWETHGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldGate.sol\":\"YieldGate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/YieldGate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IWETHGateway} from \\\"./deps/Aave.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract YieldGate {\\n    event PoolDeployed(address indexed beneficiary, address indexed deployer, address aavePool);\\n\\n    address immutable beneficiaryPoolLib;\\n    address public immutable aavePool;\\n    IWETHGateway public immutable wethgw;\\n    IERC20 public immutable token;\\n\\n    // beneficiary => BeneficiaryPool\\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\\n\\n    constructor(\\n        address _pool,\\n        address wethGateway,\\n        address aWETH\\n    ) {\\n        aavePool = _pool;\\n        wethgw = IWETHGateway(wethGateway);\\n        token = IERC20(aWETH);\\n\\n        BeneficiaryPool bp = new BeneficiaryPool();\\n        // init it so no one else can (RIP Parity Multisig)\\n        bp.init(address(this), msg.sender);\\n        beneficiaryPoolLib = address(bp);\\n    }\\n\\n    function deployPool(address beneficiary) external returns (address) {\\n        BeneficiaryPool bpool = BeneficiaryPool(Clones.clone(beneficiaryPoolLib));\\n        bpool.init(address(this), beneficiary);\\n        beneficiaryPools[beneficiary] = bpool;\\n        return address(bpool);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.claimable();\\n    }\\n\\n    // staked returns the total staked ether on behalf of the beneficiary.\\n    function staked(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.staked();\\n    }\\n\\n    function supporterStaked(address supporter, address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.supporters(supporter);\\n    }\\n}\\n\\ncontract BeneficiaryPool {\\n    event Staked(address indexed beneficiary, address indexed supporter, uint256 amount);\\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\\n    event Claimed(address indexed beneficiary, uint256 amount);\\n\\n    YieldGate gate;\\n    address public beneficiary;\\n\\n    // supporter => amount\\n    mapping(address => uint256) public supporters;\\n    // total staked amount\\n    uint256 internal totalStake;\\n\\n    modifier onlyBeneficiary() {\\n        require(msg.sender == beneficiary, \\\"only beneficiary\\\");\\n        _;\\n    }\\n\\n    // Initializes this contract's parameters after deployment. This is called\\n    // by the pool factory, i.e. the Yieldgate main contract, right after\\n    // deployment. Can only be called once.\\n    function init(address _gate, address _beneficiary) public {\\n        require(address(gate) == address(0), \\\"already initialized\\\");\\n\\n        gate = YieldGate(_gate);\\n        beneficiary = _beneficiary;\\n    }\\n\\n    // Stakes the sent ether on behalf of the provided supporter. The supporter\\n    // is usually msg.sender if staking on the transaction sender's behalf.\\n    function stake(address supporter) public payable {\\n        uint256 amount = msg.value;\\n        supporters[supporter] += amount;\\n        totalStake += amount;\\n\\n        gate.wethgw().depositETH{value: amount}(gate.aavePool(), address(this), 0);\\n        emit Staked(beneficiary, supporter, amount);\\n    }\\n\\n    // Unstakes all previously staked ether by the calling supporter.\\n    // The beneficiary keeps all generated yield.\\n    function unstake() public returns (uint256) {\\n        address supporter = msg.sender;\\n        uint256 amount = supporters[supporter];\\n        require(amount >= 0, \\\"no supporter\\\");\\n\\n        supporters[supporter] = 0;\\n        totalStake -= amount;\\n\\n        withdraw(amount, supporter);\\n        emit Unstaked(beneficiary, supporter, amount);\\n        return amount;\\n    }\\n\\n    // claim sends the accrued interest to the beneficiary of this pool. Staked\\n    // ether remains at the yield pool and continues generating yield.\\n    function claim() public onlyBeneficiary returns (uint256) {\\n        uint256 amount = claimable();\\n        withdraw(amount, beneficiary);\\n        emit Claimed(beneficiary, amount);\\n        return amount;\\n    }\\n\\n    function withdraw(uint256 amount, address receiver) internal {\\n        require(gate.token().approve(address(gate.wethgw()), amount), \\\"ethgw approval failed\\\");\\n        gate.wethgw().withdrawETH(gate.aavePool(), amount, receiver);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable() public view returns (uint256) {\\n        return gate.token().balanceOf(address(this)) - staked();\\n    }\\n\\n    // staked returns the total staked ether by this beneficiary pool.\\n    function staked() public view returns (uint256) {\\n        return totalStake;\\n    }\\n}\\n\",\"keccak256\":\"0x99b2a69c6fd165f09bee02b5b813ad58a7770293ec90e9fba02c4eed76306512\",\"license\":\"MIT\"},\"contracts/deps/Aave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IWETHGateway {\\n    function depositETH(\\n        address pool,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external payable;\\n\\n    function withdrawETH(\\n        address pool,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5a84008caec9e4262ac418c95239775451c4b6d89e85a1339c41442453bfe705\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620021eb380380620021eb83398181016040528101906200003891906200022b565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250506000604051620000e490620001b3565b604051809103906000f08015801562000101573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630336040518363ffffffff1660e01b81526004016200014192919062000298565b600060405180830381600087803b1580156200015c57600080fd5b505af115801562000171573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050620002c5565b6113ce8062000e1d83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f382620001c6565b9050919050565b6200020581620001e6565b81146200021157600080fd5b50565b6000815190506200022581620001fa565b92915050565b600080600060608486031215620002475762000246620001c1565b5b6000620002578682870162000214565b93505060206200026a8682870162000214565b92505060406200027d8682870162000214565b9150509250925092565b6200029281620001e6565b82525050565b6000604082019050620002af600083018562000287565b620002be602083018462000287565b9392505050565b60805160a05160c05160e051610b1e620002ff60003960006106d2015260006106ae01526000610563015260006101df0152610b1e6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a03e4bc31161005b578063a03e4bc31461014d578063bfb689c31461016b578063f29046111461019b578063fc0c546a146101b957610088565b806329a134941461008d578063402914f5146100bd578063956d67c6146100ed57806398807d841461011d575b600080fd5b6100a760048036038101906100a2919061082c565b6101d7565b6040516100b49190610868565b60405180910390f35b6100d760048036038101906100d2919061082c565b6102f8565b6040516100e4919061089c565b60405180910390f35b6101076004803603810190610102919061082c565b610413565b6040516101149190610916565b60405180910390f35b6101376004803603810190610132919061082c565b610446565b604051610144919061089c565b60405180910390f35b610155610561565b6040516101629190610868565b60405180910390f35b61018560048036038101906101809190610931565b610585565b604051610192919061089c565b60405180910390f35b6101a36106ac565b6040516101b09190610992565b60405180910390f35b6101c16106d0565b6040516101ce91906109ce565b60405180910390f35b6000806102037f00000000000000000000000000000000000000000000000000000000000000006106f4565b90508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630856040518363ffffffff1660e01b81526004016102409291906109e9565b600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b50505050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080915050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561039b57600091505061040e565b8073ffffffffffffffffffffffffffffffffffffffff1663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610a3e565b9150505b919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104e957600091505061055c565b8073ffffffffffffffffffffffffffffffffffffffff16630b76619b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610a3e565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106285760009150506106a6565b8073ffffffffffffffffffffffffffffffffffffffff1663647c75e2856040518263ffffffff1660e01b81526004016106619190610868565b602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190610a3e565b9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90610ac8565b60405180910390fd5b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b610862816107ee565b82525050565b600060208201905061087d6000830184610859565b92915050565b6000819050919050565b61089681610883565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6000819050919050565b60006108dc6108d76108d2846107ce565b6108b7565b6107ce565b9050919050565b60006108ee826108c1565b9050919050565b6000610900826108e3565b9050919050565b610910816108f5565b82525050565b600060208201905061092b6000830184610907565b92915050565b60008060408385031215610948576109476107c9565b5b600061095685828601610817565b925050602061096785828601610817565b9150509250929050565b600061097c826108e3565b9050919050565b61098c81610971565b82525050565b60006020820190506109a76000830184610983565b92915050565b60006109b8826108e3565b9050919050565b6109c8816109ad565b82525050565b60006020820190506109e360008301846109bf565b92915050565b60006040820190506109fe6000830185610859565b610a0b6020830184610859565b9392505050565b610a1b81610883565b8114610a2657600080fd5b50565b600081519050610a3881610a12565b92915050565b600060208284031215610a5457610a536107c9565b5b6000610a6284828501610a29565b91505092915050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610ab2601683610a6b565b9150610abd82610a7c565b602082019050919050565b60006020820190508181036000830152610ae181610aa5565b905091905056fea26469706673582212209548919948f2466db824c135a97056999ccdcdf68572272010f3d44d2627f23864736f6c634300080a0033608060405234801561001057600080fd5b506113ae806100206000396000f3fe60806040526004361061007b5760003560e01c80634e71d92d1161004e5780634e71d92d1461011d578063647c75e214610148578063af38d75714610185578063f09a4016146101b05761007b565b80630b76619b1461008057806326476204146100ab5780632def6620146100c757806338af3eed146100f2575b600080fd5b34801561008c57600080fd5b506100956101d9565b6040516100a29190610d29565b60405180910390f35b6100c560048036038101906100c09190610da7565b6101e3565b005b3480156100d357600080fd5b506100dc61046f565b6040516100e99190610d29565b60405180910390f35b3480156100fe57600080fd5b506101076105f4565b6040516101149190610de3565b60405180910390f35b34801561012957600080fd5b5061013261061a565b60405161013f9190610d29565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190610da7565b61075b565b60405161017c9190610d29565b60405180910390f35b34801561019157600080fd5b5061019a610773565b6040516101a79190610d29565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190610dfe565b610894565b005b6000600354905090565b600034905080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102379190610e6d565b9250508190555080600360008282546102509190610e6d565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610f01565b73ffffffffffffffffffffffffffffffffffffffff1663474cf53d8260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a03e4bc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190610f43565b3060006040518563ffffffff1660e01b81526004016103b293929190610fc3565b6000604051808303818588803b1580156103cb57600080fd5b505af11580156103df573d6000803e3d6000fd5b50505050508173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7836040516104639190610d29565b60405180910390a35050565b6000803390506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008110156104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490611057565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360008282546105549190611077565b9250508190555061056581836109a8565b8173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e3836040516105e49190610d29565b60405180910390a3809250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a3906110f7565b60405180910390fd5b60006106b6610773565b90506106e481600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109a8565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161074c9190610d29565b60405180910390a28091505090565b60026020528060005260406000206000915090505481565b600061077d6101d9565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190611155565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108449190610de3565b602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088591906111ae565b61088f9190611077565b905090565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091a90611227565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611155565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190610f01565b846040518363ffffffff1660e01b8152600401610aff929190611247565b6020604051808303816000875af1158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906112a8565b610b81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7890611321565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190610f01565b73ffffffffffffffffffffffffffffffffffffffff166380500d2060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a03e4bc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190610f43565b84846040518463ffffffff1660e01b8152600401610cda93929190611341565b600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b505050505050565b6000819050919050565b610d2381610d10565b82525050565b6000602082019050610d3e6000830184610d1a565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d7482610d49565b9050919050565b610d8481610d69565b8114610d8f57600080fd5b50565b600081359050610da181610d7b565b92915050565b600060208284031215610dbd57610dbc610d44565b5b6000610dcb84828501610d92565b91505092915050565b610ddd81610d69565b82525050565b6000602082019050610df86000830184610dd4565b92915050565b60008060408385031215610e1557610e14610d44565b5b6000610e2385828601610d92565b9250506020610e3485828601610d92565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e7882610d10565b9150610e8383610d10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb857610eb7610e3e565b5b828201905092915050565b6000610ece82610d69565b9050919050565b610ede81610ec3565b8114610ee957600080fd5b50565b600081519050610efb81610ed5565b92915050565b600060208284031215610f1757610f16610d44565b5b6000610f2584828501610eec565b91505092915050565b600081519050610f3d81610d7b565b92915050565b600060208284031215610f5957610f58610d44565b5b6000610f6784828501610f2e565b91505092915050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b6000610fad610fa8610fa384610f70565b610f88565b610f7a565b9050919050565b610fbd81610f92565b82525050565b6000606082019050610fd86000830186610dd4565b610fe56020830185610dd4565b610ff26040830184610fb4565b949350505050565b600082825260208201905092915050565b7f6e6f20737570706f727465720000000000000000000000000000000000000000600082015250565b6000611041600c83610ffa565b915061104c8261100b565b602082019050919050565b6000602082019050818103600083015261107081611034565b9050919050565b600061108282610d10565b915061108d83610d10565b9250828210156110a05761109f610e3e565b5b828203905092915050565b7f6f6e6c792062656e656669636961727900000000000000000000000000000000600082015250565b60006110e1601083610ffa565b91506110ec826110ab565b602082019050919050565b60006020820190508181036000830152611110816110d4565b9050919050565b600061112282610d69565b9050919050565b61113281611117565b811461113d57600080fd5b50565b60008151905061114f81611129565b92915050565b60006020828403121561116b5761116a610d44565b5b600061117984828501611140565b91505092915050565b61118b81610d10565b811461119657600080fd5b50565b6000815190506111a881611182565b92915050565b6000602082840312156111c4576111c3610d44565b5b60006111d284828501611199565b91505092915050565b7f616c726561647920696e697469616c697a656400000000000000000000000000600082015250565b6000611211601383610ffa565b915061121c826111db565b602082019050919050565b6000602082019050818103600083015261124081611204565b9050919050565b600060408201905061125c6000830185610dd4565b6112696020830184610d1a565b9392505050565b60008115159050919050565b61128581611270565b811461129057600080fd5b50565b6000815190506112a28161127c565b92915050565b6000602082840312156112be576112bd610d44565b5b60006112cc84828501611293565b91505092915050565b7f657468677720617070726f76616c206661696c65640000000000000000000000600082015250565b600061130b601583610ffa565b9150611316826112d5565b602082019050919050565b6000602082019050818103600083015261133a816112fe565b9050919050565b60006060820190506113566000830186610dd4565b6113636020830185610d1a565b6113706040830184610dd4565b94935050505056fea2646970667358221220beea16c288551ec98a14c762c880de68e018b4d66bcfdce7cae255ba8a1f05ea64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a03e4bc31161005b578063a03e4bc31461014d578063bfb689c31461016b578063f29046111461019b578063fc0c546a146101b957610088565b806329a134941461008d578063402914f5146100bd578063956d67c6146100ed57806398807d841461011d575b600080fd5b6100a760048036038101906100a2919061082c565b6101d7565b6040516100b49190610868565b60405180910390f35b6100d760048036038101906100d2919061082c565b6102f8565b6040516100e4919061089c565b60405180910390f35b6101076004803603810190610102919061082c565b610413565b6040516101149190610916565b60405180910390f35b6101376004803603810190610132919061082c565b610446565b604051610144919061089c565b60405180910390f35b610155610561565b6040516101629190610868565b60405180910390f35b61018560048036038101906101809190610931565b610585565b604051610192919061089c565b60405180910390f35b6101a36106ac565b6040516101b09190610992565b60405180910390f35b6101c16106d0565b6040516101ce91906109ce565b60405180910390f35b6000806102037f00000000000000000000000000000000000000000000000000000000000000006106f4565b90508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630856040518363ffffffff1660e01b81526004016102409291906109e9565b600060405180830381600087803b15801561025a57600080fd5b505af115801561026e573d6000803e3d6000fd5b50505050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080915050919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561039b57600091505061040e565b8073ffffffffffffffffffffffffffffffffffffffff1663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610a3e565b9150505b919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104e957600091505061055c565b8073ffffffffffffffffffffffffffffffffffffffff16630b76619b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610a3e565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106285760009150506106a6565b8073ffffffffffffffffffffffffffffffffffffffff1663647c75e2856040518263ffffffff1660e01b81526004016106619190610868565b602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190610a3e565b9150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90610ac8565b60405180910390fd5b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107f9826107ce565b9050919050565b610809816107ee565b811461081457600080fd5b50565b60008135905061082681610800565b92915050565b600060208284031215610842576108416107c9565b5b600061085084828501610817565b91505092915050565b610862816107ee565b82525050565b600060208201905061087d6000830184610859565b92915050565b6000819050919050565b61089681610883565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6000819050919050565b60006108dc6108d76108d2846107ce565b6108b7565b6107ce565b9050919050565b60006108ee826108c1565b9050919050565b6000610900826108e3565b9050919050565b610910816108f5565b82525050565b600060208201905061092b6000830184610907565b92915050565b60008060408385031215610948576109476107c9565b5b600061095685828601610817565b925050602061096785828601610817565b9150509250929050565b600061097c826108e3565b9050919050565b61098c81610971565b82525050565b60006020820190506109a76000830184610983565b92915050565b60006109b8826108e3565b9050919050565b6109c8816109ad565b82525050565b60006020820190506109e360008301846109bf565b92915050565b60006040820190506109fe6000830185610859565b610a0b6020830184610859565b9392505050565b610a1b81610883565b8114610a2657600080fd5b50565b600081519050610a3881610a12565b92915050565b600060208284031215610a5457610a536107c9565b5b6000610a6284828501610a29565b91505092915050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610ab2601683610a6b565b9150610abd82610a7c565b602082019050919050565b60006020820190508181036000830152610ae181610aa5565b905091905056fea26469706673582212209548919948f2466db824c135a97056999ccdcdf68572272010f3d44d2627f23864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 186,
        "contract": "contracts/YieldGate.sol:YieldGate",
        "label": "beneficiaryPools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(BeneficiaryPool)633)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BeneficiaryPool)633": {
        "encoding": "inplace",
        "label": "contract BeneficiaryPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(BeneficiaryPool)633)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BeneficiaryPool)",
        "numberOfBytes": "32",
        "value": "t_contract(BeneficiaryPool)633"
      }
    }
  }
}