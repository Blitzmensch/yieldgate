{
  "address": "0x3E3Dffe5CFe8059F93004212fB16465d6d550c49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aWETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaryPools",
      "outputs": [
        {
          "internalType": "contract BeneficiaryPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getOrDeployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supporter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "supporterStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethgw",
      "outputs": [
        {
          "internalType": "contract IWETHGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8a22f937b941b6e7453edd776b52d67119d5f9c0c2f41d156f65beda3868ddb",
  "receipt": {
    "to": null,
    "from": "0xcF99594e0EB80797e212Eddbd08DA1E6f687aF7f",
    "contractAddress": "0x3E3Dffe5CFe8059F93004212fB16465d6d550c49",
    "transactionIndex": 12,
    "gasUsed": "2028274",
    "logsBloom": "0x
    "blockHash": "0xd4953ff3a8ddf0c28f2314788734c6c03eded9e8b1ed796a221b3a0b73a684c5",
    "transactionHash": "0xe8a22f937b941b6e7453edd776b52d67119d5f9c0c2f41d156f65beda3868ddb",
    "logs": [],
    "blockNumber": 7415632,
    "cumulativeGasUsed": "3502331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x368EedF3f56ad10b9bC57eed4Dac65B26Bb667f6",
    "0xd5B55D3Ed89FDa19124ceB5baB620328287b915d",
    "0x27B4692C93959048833f40702b22FE3578E77759"
  ],
  "numDeployments": 1,
  "solcInputHash": "b1b22d80251a7d6435529df11fef15d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aWETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaryPools\",\"outputs\":[{\"internalType\":\"contract BeneficiaryPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getOrDeployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"supporterStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethgw\",\"outputs\":[{\"internalType\":\"contract IWETHGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldGate.sol\":\"YieldGate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/YieldGate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IWETHGateway} from \\\"./deps/Aave.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract YieldGate {\\n    event Staked(address indexed beneficiary, address indexed supporter, uint256 amount);\\n    event Unstaked(address indexed beneficiary, address indexed supporter, uint256 amount);\\n    event Claimed(address indexed beneficiary, uint256 amount);\\n\\n    address immutable beneficiaryPoolLib;\\n    address immutable public pool;\\n    IWETHGateway immutable public wethgw;\\n    IERC20 immutable public token;\\n\\n    // beneficiary => BeneficiaryPool\\n    mapping(address => BeneficiaryPool) public beneficiaryPools;\\n\\n    constructor(\\n        address _pool,\\n        address wethGateway,\\n        address aWETH\\n    ) {\\n        pool = _pool;\\n        wethgw = IWETHGateway(wethGateway);\\n        token = IERC20(aWETH);\\n\\n        BeneficiaryPool bp = new BeneficiaryPool();\\n        // init it so no one else can (RIP Parity Multisig)\\n        bp.init(address(this), msg.sender);\\n        beneficiaryPoolLib = address(bp);\\n    }\\n\\n    function stake(address beneficiary) public payable {\\n        address bpool = getOrDeployPool(beneficiary);\\n        uint256 amount = msg.value;\\n        BeneficiaryPool(bpool).stake{value: amount}(msg.sender);\\n        emit Staked(beneficiary, msg.sender, amount);\\n    }\\n\\n    function unstake(address beneficiary) public {\\n        address bpool = getOrDeployPool(beneficiary);\\n        uint256 amount = BeneficiaryPool(bpool).unstake(msg.sender);\\n        emit Unstaked(beneficiary, msg.sender, amount);\\n    }\\n\\n    function claim() public {\\n        uint256 amount = beneficiaryPools[msg.sender].claim();\\n        emit Claimed(msg.sender, amount);\\n    }\\n\\n    function getOrDeployPool(address beneficiary) public returns (address) {\\n        address bpool = address(beneficiaryPools[beneficiary]);\\n        if (bpool != address(0)) {\\n            return bpool;\\n        }\\n        return deployPool(beneficiary);\\n    }\\n\\n    function deployPool(address beneficiary) internal returns (address) {\\n        BeneficiaryPool bpool = BeneficiaryPool(\\n            Clones.clone(beneficiaryPoolLib)\\n        );\\n        bpool.init(address(this), beneficiary);\\n        beneficiaryPools[beneficiary] = bpool;\\n        return address(bpool);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.claimable();\\n    }\\n\\n    // staked returns the total staked ether on behalf of the beneficiary.\\n    function staked(address beneficiary) public view returns (uint256) {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.staked();\\n    }\\n\\n    function supporterStaked(address supporter, address beneficiary)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        BeneficiaryPool bpool = beneficiaryPools[beneficiary];\\n        if (address(bpool) == address(0)) {\\n            return 0;\\n        }\\n        return bpool.supporters(supporter);\\n    }\\n}\\n\\ncontract BeneficiaryPool {\\n    YieldGate gate;\\n    address beneficiary;\\n\\n    // supporter => amount\\n    mapping(address => uint256) public supporters;\\n    // total staked amount\\n    uint256 internal totalStake;\\n\\n    modifier onlyGate() {\\n        require(msg.sender == address(gate), \\\"only YieldGate\\\");\\n        _;\\n    }\\n\\n    function init(\\n        address _gate,\\n        address _beneficiary\\n    ) public {\\n        require(beneficiary == address(0), \\\"already initialized\\\");\\n\\n        gate = YieldGate(_gate);\\n        beneficiary = _beneficiary;\\n    }\\n\\n    // Stakes the sent ether, registering the caller as a supporter.\\n    function stake(address supporter) public payable onlyGate returns (uint256) {\\n        uint256 amount = msg.value;\\n        supporters[supporter] += amount;\\n        totalStake += amount;\\n\\n        gate.wethgw().depositETH{value: amount}(gate.pool(), address(this), 0);\\n        return amount;\\n    }\\n\\n    // Unstakes all previously staked ether by the calling supporter.\\n    // The beneficiary keeps all generated yield.\\n    function unstake(address supporter) public onlyGate returns (uint256) {\\n        uint256 amount = supporters[supporter];\\n        supporters[supporter] = 0;\\n        totalStake -= amount;\\n\\n        withdraw(amount, supporter);\\n        return amount;\\n    }\\n\\n    // claim sends the accrued interest to the beneficiary of this pool. The\\n    // stake remains at the yield pool and continues generating yield.\\n    function claim() public onlyGate returns (uint256) {\\n        uint256 amount = claimable();\\n        withdraw(amount, beneficiary);\\n        return amount;\\n    }\\n\\n    function withdraw(uint256 amount, address receiver) internal {\\n        require(\\n            gate.token().approve(address(gate.wethgw()), amount),\\n            \\\"ethgw approval failed\\\"\\n        );\\n        gate.wethgw().withdrawETH(gate.pool(), amount, receiver);\\n    }\\n\\n    // claimable returns the total earned ether by the provided beneficiary.\\n    // It is the accrued interest on all staked ether.\\n    // It can be withdrawn by the beneficiary with claim.\\n    function claimable() public view returns (uint256) {\\n        return gate.token().balanceOf(address(this)) - staked();\\n    }\\n\\n    // staked returns the total staked ether by this beneficiary pool.\\n    function staked() public view returns (uint256) {\\n        return totalStake;\\n    }\\n}\\n\",\"keccak256\":\"0x71565b9aabea669799a8e45648e68d52a9b8f9db2092efa9e5bc333961112bc5\",\"license\":\"MIT\"},\"contracts/deps/Aave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IWETHGateway {\\n  function depositETH(\\n    address pool,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external payable;\\n\\n  function withdrawETH(\\n    address pool,\\n    uint256 amount,\\n    address onBehalfOf\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc0fd6be23ec3aa761fa7dcbaffa969362a805ace64bd9202fdf9f753c86d8b26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200254a3803806200254a83398181016040528101906200003891906200022b565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250506000604051620000e490620001b3565b604051809103906000f08015801562000101573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630336040518363ffffffff1660e01b81526004016200014192919062000298565b600060405180830381600087803b1580156200015c57600080fd5b505af115801562000171573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050620002c5565b61128d80620012bd83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f382620001c6565b9050919050565b6200020581620001e6565b81146200021157600080fd5b50565b6000815190506200022581620001fa565b92915050565b600080600060608486031215620002475762000246620001c1565b5b6000620002578682870162000214565b93505060206200026a8682870162000214565b92505060406200027d8682870162000214565b9150509250925092565b6200029281620001e6565b82525050565b6000604082019050620002af600083018562000287565b620002be602083018462000287565b9392505050565b60805160a05160c05160e051610fbe620002ff6000396000610a5101526000610a2d015260006102b101526000610a7b0152610fbe6000f3fe60806040526004361061009c5760003560e01c806398807d841161006457806398807d8414610179578063a8401be5146101b6578063bfb689c3146101f3578063f2888dbb14610230578063f290461114610259578063fc0c546a146102845761009c565b806316f0115b146100a157806326476204146100cc578063402914f5146100e85780634e71d92d14610125578063956d67c61461013c575b600080fd5b3480156100ad57600080fd5b506100b66102af565b6040516100c39190610caa565b60405180910390f35b6100e660048036038101906100e19190610cf6565b6102d3565b005b3480156100f457600080fd5b5061010f600480360381019061010a9190610cf6565b6103cd565b60405161011c9190610d3c565b60405180910390f35b34801561013157600080fd5b5061013a6104e8565b005b34801561014857600080fd5b50610163600480360381019061015e9190610cf6565b61060c565b6040516101709190610db6565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190610cf6565b61063f565b6040516101ad9190610d3c565b60405180910390f35b3480156101c257600080fd5b506101dd60048036038101906101d89190610cf6565b61075a565b6040516101ea9190610caa565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190610dd1565b61080d565b6040516102279190610d3c565b60405180910390f35b34801561023c57600080fd5b5061025760048036038101906102529190610cf6565b610934565b005b34801561026557600080fd5b5061026e610a2b565b60405161027b9190610e32565b60405180910390f35b34801561029057600080fd5b50610299610a4f565b6040516102a69190610e6e565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60006102de8261075a565b905060003490508173ffffffffffffffffffffffffffffffffffffffff16632647620482336040518363ffffffff1660e01b815260040161031f9190610caa565b60206040518083038185885af115801561033d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103629190610eb5565b503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f5dac0c1b1112564a045ba943c9d50270893e8e826c49be8e7073adc713ab7bd7836040516103c09190610d3c565b60405180910390a3505050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104705760009150506104e3565b8073ffffffffffffffffffffffffffffffffffffffff1663af38d7576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610eb5565b9150505b919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e71d92d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610eb5565b90503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516106019190610d3c565b60405180910390a250565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106e2576000915050610755565b8073ffffffffffffffffffffffffffffffffffffffff16630b76619b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190610eb5565b9150505b919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107fb5780915050610808565b61080483610a73565b9150505b919050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108b057600091505061092e565b8073ffffffffffffffffffffffffffffffffffffffff1663647c75e2856040518263ffffffff1660e01b81526004016108e99190610caa565b602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190610eb5565b9150505b92915050565b600061093f8261075a565b905060008173ffffffffffffffffffffffffffffffffffffffff1663f2888dbb336040518263ffffffff1660e01b815260040161097c9190610caa565b6020604051808303816000875af115801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190610eb5565b90503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fd8654fcc8cf5b36d30b3f5e4688fc78118e6d68de60b9994e09902268b57c3e383604051610a1e9190610d3c565b60405180910390a3505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610a9f7f0000000000000000000000000000000000000000000000000000000000000000610b94565b90508073ffffffffffffffffffffffffffffffffffffffff1663f09a401630856040518363ffffffff1660e01b8152600401610adc929190610ee2565b600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b50505050806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080915050919050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5b90610f68565b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9482610c69565b9050919050565b610ca481610c89565b82525050565b6000602082019050610cbf6000830184610c9b565b92915050565b600080fd5b610cd381610c89565b8114610cde57600080fd5b50565b600081359050610cf081610cca565b92915050565b600060208284031215610d0c57610d0b610cc5565b5b6000610d1a84828501610ce1565b91505092915050565b6000819050919050565b610d3681610d23565b82525050565b6000602082019050610d516000830184610d2d565b92915050565b6000819050919050565b6000610d7c610d77610d7284610c69565b610d57565b610c69565b9050919050565b6000610d8e82610d61565b9050919050565b6000610da082610d83565b9050919050565b610db081610d95565b82525050565b6000602082019050610dcb6000830184610da7565b92915050565b60008060408385031215610de857610de7610cc5565b5b6000610df685828601610ce1565b9250506020610e0785828601610ce1565b9150509250929050565b6000610e1c82610d83565b9050919050565b610e2c81610e11565b82525050565b6000602082019050610e476000830184610e23565b92915050565b6000610e5882610d83565b9050919050565b610e6881610e4d565b82525050565b6000602082019050610e836000830184610e5f565b92915050565b610e9281610d23565b8114610e9d57600080fd5b50565b600081519050610eaf81610e89565b92915050565b600060208284031215610ecb57610eca610cc5565b5b6000610ed984828501610ea0565b91505092915050565b6000604082019050610ef76000830185610c9b565b610f046020830184610c9b565b9392505050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000610f52601683610f0b565b9150610f5d82610f1c565b602082019050919050565b60006020820190508181036000830152610f8181610f45565b905091905056fea264697066735822122023dcbe0581f7ab941a33159a4de426ffbe97c2141cf85748b550b745c76d378964736f6c634300080a0033608060405234801561001057600080fd5b5061126d806100206000396000f3fe6080604052600436106100705760003560e01c8063647c75e21161004e578063647c75e2146100fb578063af38d75714610138578063f09a401614610163578063f2888dbb1461018c57610070565b80630b76619b1461007557806326476204146100a05780634e71d92d146100d0575b600080fd5b34801561008157600080fd5b5061008a6101c9565b6040516100979190610c54565b60405180910390f35b6100ba60048036038101906100b59190610cd2565b6101d3565b6040516100c79190610c54565b60405180910390f35b3480156100dc57600080fd5b506100e561046e565b6040516100f29190610c54565b60405180910390f35b34801561010757600080fd5b50610122600480360381019061011d9190610cd2565b61053e565b60405161012f9190610c54565b60405180910390f35b34801561014457600080fd5b5061014d610556565b60405161015a9190610c54565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610cff565b610677565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610cd2565b61078d565b6040516101c09190610c54565b60405180910390f35b6000600354905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b90610d9c565b60405180910390fd5b600034905080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b89190610deb565b9250508190555080600360008282546102d19190610deb565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103679190610e7f565b73ffffffffffffffffffffffffffffffffffffffff1663474cf53d8260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104129190610ec1565b3060006040518563ffffffff1660e01b815260040161043393929190610f50565b6000604051808303818588803b15801561044c57600080fd5b505af1158015610460573d6000803e3d6000fd5b505050505080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f690610d9c565b60405180910390fd5b6000610509610556565b905061053781600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166108d3565b8091505090565b60026020528060005260406000206000915090505481565b60006105606101c9565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ef9190610fc5565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106279190610ff2565b602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611039565b6106729190611066565b905090565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff906110e6565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590610d9c565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360008282546108b99190611066565b925050819055506108ca81846108d3565b80915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109629190610fc5565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c9190610e7f565b846040518363ffffffff1660e01b8152600401610a2a929190611106565b6020604051808303816000875af1158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190611167565b610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa3906111e0565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29046116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190610e7f565b73ffffffffffffffffffffffffffffffffffffffff166380500d2060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190610ec1565b84846040518463ffffffff1660e01b8152600401610c0593929190611200565b600060405180830381600087803b158015610c1f57600080fd5b505af1158015610c33573d6000803e3d6000fd5b505050505050565b6000819050919050565b610c4e81610c3b565b82525050565b6000602082019050610c696000830184610c45565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9f82610c74565b9050919050565b610caf81610c94565b8114610cba57600080fd5b50565b600081359050610ccc81610ca6565b92915050565b600060208284031215610ce857610ce7610c6f565b5b6000610cf684828501610cbd565b91505092915050565b60008060408385031215610d1657610d15610c6f565b5b6000610d2485828601610cbd565b9250506020610d3585828601610cbd565b9150509250929050565b600082825260208201905092915050565b7f6f6e6c79205969656c6447617465000000000000000000000000000000000000600082015250565b6000610d86600e83610d3f565b9150610d9182610d50565b602082019050919050565b60006020820190508181036000830152610db581610d79565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df682610c3b565b9150610e0183610c3b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e3657610e35610dbc565b5b828201905092915050565b6000610e4c82610c94565b9050919050565b610e5c81610e41565b8114610e6757600080fd5b50565b600081519050610e7981610e53565b92915050565b600060208284031215610e9557610e94610c6f565b5b6000610ea384828501610e6a565b91505092915050565b600081519050610ebb81610ca6565b92915050565b600060208284031215610ed757610ed6610c6f565b5b6000610ee584828501610eac565b91505092915050565b610ef781610c94565b82525050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b6000610f3a610f35610f3084610efd565b610f15565b610f07565b9050919050565b610f4a81610f1f565b82525050565b6000606082019050610f656000830186610eee565b610f726020830185610eee565b610f7f6040830184610f41565b949350505050565b6000610f9282610c94565b9050919050565b610fa281610f87565b8114610fad57600080fd5b50565b600081519050610fbf81610f99565b92915050565b600060208284031215610fdb57610fda610c6f565b5b6000610fe984828501610fb0565b91505092915050565b60006020820190506110076000830184610eee565b92915050565b61101681610c3b565b811461102157600080fd5b50565b6000815190506110338161100d565b92915050565b60006020828403121561104f5761104e610c6f565b5b600061105d84828501611024565b91505092915050565b600061107182610c3b565b915061107c83610c3b565b92508282101561108f5761108e610dbc565b5b828203905092915050565b7f616c726561647920696e697469616c697a656400000000000000000000000000600082015250565b60006110d0601383610d3f565b91506110db8261109a565b602082019050919050565b600060208201905081810360008301526110ff816110c3565b9050919050565b600060408201905061111b6000830185610eee565b6111286020830184610c45565b9392505050565b60008115159050919050565b6111448161112f565b811461114f57600080fd5b50565b6000815190506111618161113b565b92915050565b60006020828403121561117d5761117c610c6f565b5b600061118b84828501611152565b91505092915050565b7f657468677720617070726f76616c206661696c65640000000000000000000000600082015250565b60006111ca601583610d3f565b91506111d582611194565b602082019050919050565b600060208201905081810360008301526111f9816111bd565b9050919050565b60006060820190506112156000830186610eee565b6112226020830185610c45565b61122f6040830184610eee565b94935050505056fea2646970667358221220a56b41947791c90217656c7ad053c42504b0102dcf34b729619462e61bbe925964736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 200,
        "contract": "contracts/YieldGate.sol:YieldGate",
        "label": "beneficiaryPools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(BeneficiaryPool)719)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BeneficiaryPool)719": {
        "encoding": "inplace",
        "label": "contract BeneficiaryPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(BeneficiaryPool)719)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract BeneficiaryPool)",
        "numberOfBytes": "32",
        "value": "t_contract(BeneficiaryPool)719"
      }
    }
  }
}