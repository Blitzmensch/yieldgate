/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YieldGateInterface extends ethers.utils.Interface {
  functions: {
    "beneficiaryPools(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "getOrDeployPool(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "stake(address)": FunctionFragment;
    "staked(address)": FunctionFragment;
    "supporterStaked(address,address)": FunctionFragment;
    "token()": FunctionFragment;
    "unstake(address)": FunctionFragment;
    "wethgw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beneficiaryPools",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOrDeployPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(functionFragment: "staked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supporterStaked",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "unstake", values: [string]): string;
  encodeFunctionData(functionFragment: "wethgw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "beneficiaryPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrDeployPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supporterStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethgw", data: BytesLike): Result;

  events: {
    "Claimed(address,uint256)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
    "Unstaked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber] & { beneficiary: string; amount: BigNumber }
>;

export type StakedEvent = TypedEvent<
  [string, string, BigNumber] & {
    beneficiary: string;
    supporter: string;
    amount: BigNumber;
  }
>;

export type UnstakedEvent = TypedEvent<
  [string, string, BigNumber] & {
    beneficiary: string;
    supporter: string;
    amount: BigNumber;
  }
>;

export class YieldGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YieldGateInterface;

  functions: {
    beneficiaryPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrDeployPool(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    stake(
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staked(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supporterStaked(
      supporter: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethgw(overrides?: CallOverrides): Promise<[string]>;
  };

  beneficiaryPools(arg0: string, overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

  getOrDeployPool(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  stake(
    beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staked(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

  supporterStaked(
    supporter: string,
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  unstake(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethgw(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    beneficiaryPools(arg0: string, overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimable(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrDeployPool(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    stake(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    staked(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

    supporterStaked(
      supporter: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    unstake(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    wethgw(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claimed(address,uint256)"(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    Claimed(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    "Staked(address,address,uint256)"(
      beneficiary?: string | null,
      supporter?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; supporter: string; amount: BigNumber }
    >;

    Staked(
      beneficiary?: string | null,
      supporter?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; supporter: string; amount: BigNumber }
    >;

    "Unstaked(address,address,uint256)"(
      beneficiary?: string | null,
      supporter?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; supporter: string; amount: BigNumber }
    >;

    Unstaked(
      beneficiary?: string | null,
      supporter?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; supporter: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    beneficiaryPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrDeployPool(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staked(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

    supporterStaked(
      supporter: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethgw(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beneficiaryPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrDeployPool(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staked(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supporterStaked(
      supporter: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethgw(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
